	-------
----	| Trees |----
	-------
BST:
	1- Search-> Best-Case: O(1), Average-Case: O(logn), Worst-Case: O(n)
	2- Insert-> Best-Case: O(1), Average-Case: O(logn), Worst-Case: O(n)
	3- Delete-> Best-Case: O(1), Average-Case: O(logn), Worst-Case: O(n)

AVL:
	1- Insert->  Best-Case: O(1), Average-Case: O(logn), Worst-Case: O(logn)
	2- Delete->  Best-Case: O(logn), Average-Case: O(logn), Worst-Case: O(logn)

BFS + DFS -> O(N)
	
	
============================================================

	---------
----	| Graphs |----
	---------
Adjacency Matrix:
	1-	Adding an edge – O(1);
	2-	Deleting an edge – O(1);
	3-	Answering the question “is there an edge between i and j” – O(1);
	4-	Finding the successors of a given vertex – O(n);
	5-	Finding (if exists) a path between two vertices – O(n^2);
	6- 	Memory O(|V^2|)
	
Adjacency List:
	1-	Adding an edge – O(log(n));
	2-	Deleting an edge – O(log(n));
	3-	Answering the question “is there an edge between i and j” – O(log(n));
	4-	Finding the successors of a given vertex – O(k), where “k” is the length of the lists containing the successors of i;
	5-	Finding (if exists) a path between two vertices – O(n+m) – where m <= n;
	6- 	Memory O(|V + E|)
	
BFS:
	Adjacency Matrix + Adjacency List-> O(V^2)
	
DFS:
	Adjacency Matrix + Adjacency List-> O(V + E)
	
Dijkstra’s Algorithm:
	1-	With array/ linked list implementation:
			removeMin() will take O(V) time
			Priority update at each distance update O(1) time
	2-	With binary heap implementation:
			removeMin() will take O(logV) time
			Priority update at each distance update O(logV) time
	
	3-	Time complexity with array or list as priority queue will be O(V^2)
	4-	Time complexity with heap as priority queue will be O(E+ VlogV)
	
==============================================================


	---------
----	| Sorting |----
	---------
	
In-Place Sorting: (No extra array is created)
	1- Selection Sort
	2- Bubble Sort
	3- Insertion Sort
	4- Heap Sort
	
Not In-Place Sorting:
	Merge Sort
	Quick Sort
	
Time Complexity:
	1-	Quadratic O(n^2):
			Selection Sort
			Bubble Sort
			Insertion Sort
	2-	Linearithmic  O(nlogn):
			Quick Sort
			Merge Sort
			Heap Sort
	3-	Linear O(n):
			Bucket Sort
			Counting Sort
			Radix Sort


