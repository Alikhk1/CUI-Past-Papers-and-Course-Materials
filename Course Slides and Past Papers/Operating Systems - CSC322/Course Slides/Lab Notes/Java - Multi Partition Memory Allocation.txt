import java.util.Scanner;

public class MemoryAllocation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the number of memory blocks
        System.out.print("Enter the number of Memory Blocks: ");
        int numberOfBlocks = scanner.nextInt();
        int[] blockSizes = new int[numberOfBlocks];

        // Input the size of each memory block
        System.out.println("Enter the size of each Memory Block:");
        for (int i = 0; i < numberOfBlocks; i++) {
            System.out.printf("Size of Block %d: ", i + 1);
            blockSizes[i] = scanner.nextInt();
        }

        // Input the number of processes
        System.out.print("\nEnter the number of Processes: ");
        int numberOfProcesses = scanner.nextInt();
        int[] processSizes = new int[numberOfProcesses];

        // Input the size of each process
        System.out.println("Enter the size of each Process:");
        for (int i = 0; i < numberOfProcesses; i++) {
            System.out.printf("Size of Process %d: ", i + 1);
            processSizes[i] = scanner.nextInt();
        }

        // Initialize flags to track allocated blocks
        boolean[] blockAllocated = new boolean[numberOfBlocks];
        for (int i = 0; i < numberOfBlocks; i++) {
            blockAllocated[i] = false;
        }

        // Choose the fit type
        System.out.println("\nChoose Fit Type:");
        System.out.println("1. First Fit");
        System.out.println("2. Best Fit");
        System.out.println("3. Worst Fit");
        System.out.print("Enter your choice: ");
        int fitType = scanner.nextInt();

        // Allocate memory based on fit type
        if (fitType == 1) {
            allocateMemoryFirstFit(blockSizes, processSizes, blockAllocated);
        } else if (fitType == 2) {
            allocateMemoryBestFit(blockSizes, processSizes, blockAllocated);
        } else if (fitType == 3) {
            allocateMemoryWorstFit(blockSizes, processSizes, blockAllocated);
        } else {
            System.out.println("Invalid choice!");
            return;
        }

        // Display the allocation table
        printAllocationTable(blockSizes, processSizes, blockAllocated, fitType);
    }





    // Function to allocate memory using First Fit algorithm
    public static void allocateMemoryFirstFit(int[] blockSizes, int[] processSizes, boolean[] blockAllocated) {
        for (int i = 0; i < processSizes.length; i++) {
            for (int j = 0; j < blockSizes.length; j++) {
                if (!blockAllocated[j] && blockSizes[j] >= processSizes[i]) {
                    blockAllocated[j] = true;
                    break;
                }
            }
        }
    }

    // Function to allocate memory using Best Fit algorithm
    public static void allocateMemoryBestFit(int[] blockSizes, int[] processSizes, boolean[] blockAllocated) {
        for (int i = 0; i < processSizes.length; i++) {
            int bestFitIndex = -1;
            int minFragment = Integer.MAX_VALUE;
            for (int j = 0; j < blockSizes.length; j++) {
                if (!blockAllocated[j] && blockSizes[j] >= processSizes[i]) {
                    int fragment = blockSizes[j] - processSizes[i];
                    if (fragment < minFragment) {
                        minFragment = fragment;
                        bestFitIndex = j;
                    }
                }
            }
            if (bestFitIndex != -1) {
                blockAllocated[bestFitIndex] = true;
            }
        }
    }

    // Function to allocate memory using Worst Fit algorithm
    public static void allocateMemoryWorstFit(int[] blockSizes, int[] processSizes, boolean[] blockAllocated) {
        for (int i = 0; i < processSizes.length; i++) {
            int worstFitIndex = -1;
            int maxFragment = Integer.MIN_VALUE;
            for (int j = 0; j < blockSizes.length; j++) {
                if (!blockAllocated[j] && blockSizes[j] >= processSizes[i]) {
                    int fragment = blockSizes[j] - processSizes[i];
                    if (fragment > maxFragment) {
                        maxFragment = fragment;
                        worstFitIndex = j;
                    }
                }
            }
            if (worstFitIndex != -1) {
                blockAllocated[worstFitIndex] = true;
            }
        }
    }

    // Function to print the allocation table
    public static void printAllocationTable(int[] blockSizes, int[] processSizes, boolean[] blockAllocated, int fitType) {
        String fitName;
        if (fitType == 1) {
            fitName = "First Fit";
        } else if (fitType == 2) {
            fitName = "Best Fit";
        } else {
            fitName = "Worst Fit";
        }

        System.out.println("\nAllocation Table (" + fitName + "):");
        System.out.println("==============================================================================");
        System.out.printf("| %-10s | %-10s | %-10s | %-15s | %-10s |\n", "Process", "Process Size", "Allocated", "Allocated Block", "Fragment");
        System.out.println("==============================================================================");
        for (int i = 0; i < processSizes.length; i++) {
            int allocatedBlock = -1;
            int fragment = 0;
            if (fitType == 1 || fitType == 2) {
                // For First Fit and Best Fit
                for (int j = 0; j < blockSizes.length; j++) {
                    if (blockAllocated[j] && blockSizes[j] >= processSizes[i]) {
                        allocatedBlock = j;
                        fragment = blockSizes[j] - processSizes[i];
                        break;
                    }
                }
            } else if (fitType == 3) {
                // For Worst Fit
                int maxFragment = Integer.MIN_VALUE;
                for (int j = 0; j < blockSizes.length; j++) {
                    if (blockAllocated[j] && blockSizes[j] >= processSizes[i]) {
                        int currentFragment = blockSizes[j] - processSizes[i];
                        if (currentFragment > maxFragment) {
                            maxFragment = currentFragment;
                            allocatedBlock = j;
                            fragment = currentFragment;
                        }
                    }
                }
            }
            if (allocatedBlock != -1) {
                blockSizes[allocatedBlock] -= processSizes[i];
                System.out.printf("| %-10s | %-10d | %-10s | %-15s | %-10d |\n", "P" + (i + 1), processSizes[i], "Yes", "B" + (allocatedBlock + 1), fragment);
            } else {
                System.out.printf("| %-10s | %-10d | %-10s | %-15s | %-10s |\n", "P" + (i + 1), processSizes[i], "No", "-", "-");
            }
        }
        System.out.println("==============================================================================");
    }


}
